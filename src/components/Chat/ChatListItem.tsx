import React, { memo, useState } from 'react'
import { format, isToday, isYesterday, formatDistanceToNow } from 'date-fns'
import { MessageSquare, MoreVertical, Edit2, Trash2, Sparkles } from 'lucide-react'

interface Chat {
  id: string
  title: string
  created_at: string
  updated_at: string
  messages: Array<{
    id: string
    content: string
    role: string
    created_at: string
    is_ai?: boolean
  }>
}

interface ChatListItemProps {
  chat: Chat
  isActive: boolean
  onClick: () => void
  onRename: (chatId: string, newTitle: string) => void
  onDelete: (chatId: string) => void
  onGenerateTitle?: (chatId: string) => void
}

const ChatListItemComponent: React.FC<ChatListItemProps> = ({
  chat,
  isActive,
  onClick,
  onRename,
  onDelete,
  onGenerateTitle
}) => {
  const [showMenu, setShowMenu] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [editTitle, setEditTitle] = useState(chat.title)

  const lastMessage = chat.messages[0]
  
  const formatTimestamp = (dateString: string) => {
    const date = new Date(dateString)
    
    if (isToday(date)) {
      return format(date, 'HH:mm')
    } else if (isYesterday(date)) {
      return 'Yesterday'
    } else {
      return formatDistanceToNow(date, { addSuffix: true })
    }
  }

  const getLastMessagePreview = () => {
    if (!lastMessage) return 'No messages yet'
    
    const content = lastMessage.content
    const maxLength = 50
    
    if (content.length > maxLength) {
      return content.substring(0, maxLength) + '...'
    }
    
    return content
  }

  const handleMenuClick = (e: React.MouseEvent) => {
    e.stopPropagation()
    setShowMenu(!showMenu)
  }

  const handleRename = () => {
    setIsEditing(true)
    setShowMenu(false)
  }

  const handleSaveRename = () => {
    if (editTitle.trim() && editTitle !== chat.title) {
      onRename(chat.id, editTitle.trim())
    }
    setIsEditing(false)
  }

  const handleCancelRename = () => {
    setEditTitle(chat.title)
    setIsEditing(false)
  }

  const handleGenerateTitle = () => {
    if (onGenerateTitle) {
      onGenerateTitle(chat.id)
    }
    setShowMenu(false)
  }

  const handleDelete = () => {
    onDelete(chat.id)
    setShowMenu(false)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSaveRename()
    } else if (e.key === 'Escape') {
      handleCancelRename()
    }
  }

  // Check if title looks auto-generated
  const isAutoGeneratedTitle = chat.title.match(/^Chat \d{1,2}:\d{2}$/) || chat.title === 'New Chat'

  return (
    <div className="relative">
      <div
        onClick={onClick}
        className={`
          group relative flex items-center space-x-3 p-3 rounded-lg cursor-pointer
          transition-all duration-200 hover:bg-white/5
          ${isActive ? 'bg-white/10 border border-white/20' : 'hover:bg-white/5'}
        `}
      >
        {/* Chat Icon */}
        <div className={`
          flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center
          ${isActive ? 'bg-blue-500' : 'bg-white/10'}
          transition-colors duration-200
        `}>
          <MessageSquare className="w-5 h-5 text-white" />
        </div>

        {/* Chat Info */}
        <div className="flex-1 min-w-0">
          {isEditing ? (
            <input
              type="text"
              value={editTitle}
              onChange={(e) => setEditTitle(e.target.value)}
              onBlur={handleSaveRename}
              onKeyDown={handleKeyDown}
              className="w-full bg-white/10 border border-white/20 rounded px-2 py-1 text-sm text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              autoFocus
              onClick={(e) => e.stopPropagation()}
            />
          ) : (
            <div className="flex items-center space-x-1 min-w-0">
              <h3 className="text-sm font-medium text-white truncate">
                {chat.title}
              </h3>
              {isAutoGeneratedTitle && (
                <Sparkles className="w-3 h-3 text-yellow-400/60 flex-shrink-0" title="Auto-generated title" />
              )}
            </div>
          )}
          
          <p className="text-xs text-white/60 truncate mt-1">
            {getLastMessagePreview()}
          </p>
        </div>

        {/* Timestamp and Menu */}
        <div className="flex flex-col items-end space-y-1">
          <span className="text-xs text-white/40">
            {formatTimestamp(lastMessage?.created_at || chat.updated_at)}
          </span>
          
          <button
            onClick={handleMenuClick}
            className="opacity-0 group-hover:opacity-100 p-1 rounded hover:bg-white/10 transition-all duration-200"
          >
            <MoreVertical className="w-4 h-4 text-white/60" />
          </button>
        </div>

        {/* Active Indicator */}
        {isActive && (
          <div className="absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-blue-500 rounded-r" />
        )}
      </div>

      {/* Context Menu */}
      {showMenu && (
        <>
          <div 
            className="fixed inset-0 z-10" 
            onClick={() => setShowMenu(false)}
          />
          <div className="absolute right-3 top-12 z-20 bg-slate-800/90 backdrop-blur-md border border-white/20 rounded-lg shadow-lg py-1 min-w-[120px]">
            <button
              onClick={handleRename}
              className="w-full flex items-center space-x-2 px-3 py-2 text-sm text-white hover:bg-white/10 transition-colors"
            >
              <Edit2 className="w-4 h-4" />
              <span>Rename</span>
            </button>
            {onGenerateTitle && (
              <button
                onClick={handleGenerateTitle}
                className="w-full flex items-center space-x-2 px-3 py-2 text-sm text-white hover:bg-white/10 transition-colors"
              >
                <Sparkles className="w-4 h-4" />
                <span>Generate Title</span>
              </button>
            )}
            <button
              onClick={handleDelete}
              className="w-full flex items-center space-x-2 px-3 py-2 text-sm text-red-400 hover:bg-red-500/10 transition-colors"
            >
              <Trash2 className="w-4 h-4" />
              <span>Delete</span>
            </button>
          </div>
        </>
      )}
    </div>
  )
}

export const ChatListItem = memo(ChatListItemComponent)
